{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Widget5","state","dataset","stepSize","setDataSet","_this","setState","_this2","this","_this$props","props","classes","dataRaw","data","theme","_this$state","_","merge","options","scales","yAxes","ticks","dataWithColors","datasets","map","obj","index","palette","Object","objectSpread","borderColor","main","pointBackgroundColor","dark","pointHoverBackgroundColor","pointBorderColor","contrastText","pointHoverBorderColor","react_default","a","createElement","index_es","className","classNames","root","style","width","variant","keys","key","size","color","marginLeft","onClick","disabled","es","labels","Component","withStyles","withTheme","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","load","axios","get","then","res","position","top","left","Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84e8cacf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Card, Typography } from '@material-ui/core';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { withStyles } from '@material-ui/core/styles/index';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash';\r\n\r\nconst styles = theme => ({\r\n\troot: {}\r\n});\r\n\r\nclass Widget5 extends Component {\r\n\tstate = {\r\n\t\tdataset: 'BTC',\r\n\t\tstepSize: 1000\r\n\t};\r\n\r\n\tsetDataSet = dataset => {\r\n\t\tvar stepSize;\r\n\t\tif (dataset === 'BTC') {\r\n\t\t\tstepSize = 1000;\r\n\t\t} else if (dataset === 'ETH') {\r\n\t\t\tstepSize = 100;\r\n\t\t} else {\r\n\t\t\tstepSize = 50;\r\n\t\t}\r\n\t\tthis.setState({ dataset, stepSize });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { classes, data: dataRaw, theme } = this.props;\r\n\t\tconst { dataset, stepSize } = this.state;\r\n\t\tconst data = _.merge({}, dataRaw, {\r\n\t\t\toptions: {\r\n\t\t\t\tscales: {\r\n\t\t\t\t\tyAxes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\t\tstepSize: stepSize\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst dataWithColors = data.datasets[dataset].map((obj, index) => {\r\n\t\t\tconst palette = theme.palette[index === 0 ? 'primary' : 'secondary'];\r\n\t\t\treturn {\r\n\t\t\t\t...obj,\r\n\t\t\t\tborderColor: palette.main,\r\n\t\t\t\tpointBackgroundColor: palette.dark,\r\n\t\t\t\tpointHoverBackgroundColor: palette.main,\r\n\t\t\t\tpointBorderColor: palette.contrastText,\r\n\t\t\t\tpointHoverBorderColor: palette.contrastText\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<Card className={classNames(classes.root)} style={{ width: '80%' }}>\r\n\t\t\t\t<div className=\"relative p-24 flex flex-row items-center justify-between\">\r\n\t\t\t\t\t<div className=\"flex flex-col\">\r\n\t\t\t\t\t\t<Typography variant=\"subheading\">\r\n\t\t\t\t\t\t\tCryptoCurrency Predictions\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex flex-row items-center\">\r\n\t\t\t\t\t\t{Object.keys(data.datasets).map(key => (\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\tclassName=\"py-8 px-12\"\r\n\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{ color: '#FFF',marginLeft:'5%' }}\r\n\t\t\t\t\t\t\t\tonClick={() => this.setDataSet(key)}\r\n\t\t\t\t\t\t\t\tdisabled={key === dataset}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{key}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Typography className=\"relative h-320 pb-16\" style={{ color: '#FFF' }}>\r\n\t\t\t\t\t<Line\r\n\t\t\t\t\t\tdata={{\r\n\t\t\t\t\t\t\tlabels: data.labels,\r\n\t\t\t\t\t\t\tdatasets: dataWithColors\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\toptions={data.options}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Typography>\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Widget5);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\nimport axios from 'axios';\nimport { CircularProgress } from '@material-ui/core';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tload: true,\n\t\t\tdata: null\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\taxios.get('http://localhost:3000/api/getPrediction').then(res => {\n\t\t\tthis.setState({\n\t\t\t\tload: false,\n\t\t\t\tdata: res.data.data\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { load, data } = this.state;\n\t\tif (load) {\n\t\t\treturn <CircularProgress style={{ position: 'absolute', top: '50%', left: '50%' }} />;\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<Chart data={data} />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}